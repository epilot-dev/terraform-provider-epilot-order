// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-order/internal/sdk/internal/utils"
	"time"
)

type OrderPatchSource struct {
	Href  *string `default:"null" json:"href"`
	Title *string `default:"manual" json:"title"`
}

func (o OrderPatchSource) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderPatchSource) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderPatchSource) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *OrderPatchSource) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type OrderPatchStatus string

const (
	OrderPatchStatusDraft             OrderPatchStatus = "draft"
	OrderPatchStatusQuote             OrderPatchStatus = "quote"
	OrderPatchStatusPlaced            OrderPatchStatus = "placed"
	OrderPatchStatusComplete          OrderPatchStatus = "complete"
	OrderPatchStatusCancelled         OrderPatchStatus = "cancelled"
	OrderPatchStatusOpenForAcceptance OrderPatchStatus = "open_for_acceptance"
)

func (e OrderPatchStatus) ToPointer() *OrderPatchStatus {
	return &e
}

func (e *OrderPatchStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "quote":
		fallthrough
	case "placed":
		fallthrough
	case "complete":
		fallthrough
	case "cancelled":
		fallthrough
	case "open_for_acceptance":
		*e = OrderPatchStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPatchStatus: %v", v)
	}
}

// OrderPatchType - One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
type OrderPatchType string

const (
	OrderPatchTypeOneTime   OrderPatchType = "one_time"
	OrderPatchTypeRecurring OrderPatchType = "recurring"
)

func (e OrderPatchType) ToPointer() *OrderPatchType {
	return &e
}

func (e *OrderPatchType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		fallthrough
	case "recurring":
		*e = OrderPatchType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPatchType: %v", v)
	}
}

type OrderPatchRecurrences struct {
	AmountSubtotal        *float64 `json:"amount_subtotal,omitempty"`
	AmountSubtotalDecimal *string  `json:"amount_subtotal_decimal,omitempty"`
	AmountTax             *float64 `json:"amount_tax,omitempty"`
	AmountTotal           *float64 `json:"amount_total,omitempty"`
	AmountTotalDecimal    *string  `json:"amount_total_decimal,omitempty"`
	// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
	Type *OrderPatchType `default:"one_time" json:"type"`
}

func (o OrderPatchRecurrences) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderPatchRecurrences) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderPatchRecurrences) GetAmountSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountSubtotal
}

func (o *OrderPatchRecurrences) GetAmountSubtotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountSubtotalDecimal
}

func (o *OrderPatchRecurrences) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *OrderPatchRecurrences) GetAmountTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTotal
}

func (o *OrderPatchRecurrences) GetAmountTotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountTotalDecimal
}

func (o *OrderPatchRecurrences) GetType() *OrderPatchType {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderPatchSchemasType string

const (
	OrderPatchSchemasTypeVat    OrderPatchSchemasType = "VAT"
	OrderPatchSchemasTypeCustom OrderPatchSchemasType = "Custom"
)

func (e OrderPatchSchemasType) ToPointer() *OrderPatchSchemasType {
	return &e
}

func (e *OrderPatchSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = OrderPatchSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPatchSchemasType: %v", v)
	}
}

type OrderPatchTax struct {
	ID   *string                `json:"_id,omitempty"`
	Rate *string                `json:"rate,omitempty"`
	Type *OrderPatchSchemasType `json:"type,omitempty"`
}

func (o *OrderPatchTax) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrderPatchTax) GetRate() *string {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *OrderPatchTax) GetType() *OrderPatchSchemasType {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderPatchTaxes struct {
	Amount *float64        `json:"amount,omitempty"`
	Tax    []OrderPatchTax `json:"tax,omitempty"`
}

func (o *OrderPatchTaxes) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OrderPatchTaxes) GetTax() []OrderPatchTax {
	if o == nil {
		return nil
	}
	return o.Tax
}

type OrderPatchBreakdown struct {
	Recurrences []OrderPatchRecurrences `json:"recurrences,omitempty"`
	Taxes       []OrderPatchTaxes       `json:"taxes,omitempty"`
}

func (o *OrderPatchBreakdown) GetRecurrences() []OrderPatchRecurrences {
	if o == nil {
		return nil
	}
	return o.Recurrences
}

func (o *OrderPatchBreakdown) GetTaxes() []OrderPatchTaxes {
	if o == nil {
		return nil
	}
	return o.Taxes
}

type OrderPatchTotalsDetail struct {
	AmountTax *float64             `json:"amount_tax,omitempty"`
	Breakdown *OrderPatchBreakdown `json:"breakdown,omitempty"`
}

func (o *OrderPatchTotalsDetail) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *OrderPatchTotalsDetail) GetBreakdown() *OrderPatchBreakdown {
	if o == nil {
		return nil
	}
	return o.Breakdown
}

type OrderPatch struct {
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	AdditionalAddresses []BaseAddress `json:"additional_addresses,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	BillingAddress []BaseAddress `json:"billing_address,omitempty"`
	BillingContact *BaseRelation `json:"billing_contact,omitempty"`
	Customer       *BaseRelation `json:"customer,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	DeliveryAddress []BaseAddress           `json:"delivery_address,omitempty"`
	ExpiresAt       *time.Time              `json:"expires_at,omitempty"`
	MappedEntities  *BaseRelation           `json:"mapped_entities,omitempty"`
	OrderNumber     *string                 `json:"order_number,omitempty"`
	Prices          *BaseRelation           `json:"prices,omitempty"`
	Products        *BaseRelation           `json:"products,omitempty"`
	Source          *OrderPatchSource       `json:"source,omitempty"`
	SourceType      *string                 `default:"manual" json:"source_type"`
	Status          *OrderPatchStatus       `default:"draft" json:"status"`
	TotalsDetail    *OrderPatchTotalsDetail `json:"totals_detail,omitempty"`
}

func (o OrderPatch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderPatch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderPatch) GetAdditionalAddresses() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.AdditionalAddresses
}

func (o *OrderPatch) GetBillingAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *OrderPatch) GetBillingContact() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.BillingContact
}

func (o *OrderPatch) GetCustomer() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *OrderPatch) GetDeliveryAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

func (o *OrderPatch) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *OrderPatch) GetMappedEntities() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.MappedEntities
}

func (o *OrderPatch) GetOrderNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrderNumber
}

func (o *OrderPatch) GetPrices() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Prices
}

func (o *OrderPatch) GetProducts() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Products
}

func (o *OrderPatch) GetSource() *OrderPatchSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *OrderPatch) GetSourceType() *string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *OrderPatch) GetStatus() *OrderPatchStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OrderPatch) GetTotalsDetail() *OrderPatchTotalsDetail {
	if o == nil {
		return nil
	}
	return o.TotalsDetail
}
