// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-order/internal/sdk/pkg/utils"
	"time"
)

type Source struct {
	Href  *string `default:"null" json:"href"`
	Title *string `default:"manual" json:"title"`
}

func (s Source) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Source) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Source) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *Source) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type Status string

const (
	StatusDraft             Status = "draft"
	StatusQuote             Status = "quote"
	StatusPlaced            Status = "placed"
	StatusComplete          Status = "complete"
	StatusCancelled         Status = "cancelled"
	StatusOpenForAcceptance Status = "open_for_acceptance"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "quote":
		fallthrough
	case "placed":
		fallthrough
	case "complete":
		fallthrough
	case "cancelled":
		fallthrough
	case "open_for_acceptance":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// Type - One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
type Type string

const (
	TypeOneTime   Type = "one_time"
	TypeRecurring Type = "recurring"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		fallthrough
	case "recurring":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Recurrences struct {
	AmountSubtotal        *float64 `json:"amount_subtotal,omitempty"`
	AmountSubtotalDecimal *string  `json:"amount_subtotal_decimal,omitempty"`
	AmountTax             *float64 `json:"amount_tax,omitempty"`
	AmountTotal           *float64 `json:"amount_total,omitempty"`
	AmountTotalDecimal    *string  `json:"amount_total_decimal,omitempty"`
	// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
	Type *Type `default:"one_time" json:"type"`
}

func (r Recurrences) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Recurrences) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Recurrences) GetAmountSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountSubtotal
}

func (o *Recurrences) GetAmountSubtotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountSubtotalDecimal
}

func (o *Recurrences) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *Recurrences) GetAmountTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTotal
}

func (o *Recurrences) GetAmountTotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountTotalDecimal
}

func (o *Recurrences) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderType string

const (
	OrderTypeVat    OrderType = "VAT"
	OrderTypeCustom OrderType = "Custom"
)

func (e OrderType) ToPointer() *OrderType {
	return &e
}

func (e *OrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = OrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderType: %v", v)
	}
}

type Tax struct {
	ID   *string    `json:"_id,omitempty"`
	Rate *string    `json:"rate,omitempty"`
	Type *OrderType `json:"type,omitempty"`
}

func (o *Tax) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Tax) GetRate() *string {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *Tax) GetType() *OrderType {
	if o == nil {
		return nil
	}
	return o.Type
}

type Taxes struct {
	Amount *float64 `json:"amount,omitempty"`
	Tax    []Tax    `json:"tax,omitempty"`
}

func (o *Taxes) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *Taxes) GetTax() []Tax {
	if o == nil {
		return nil
	}
	return o.Tax
}

type Breakdown struct {
	Recurrences []Recurrences `json:"recurrences,omitempty"`
	Taxes       []Taxes       `json:"taxes,omitempty"`
}

func (o *Breakdown) GetRecurrences() []Recurrences {
	if o == nil {
		return nil
	}
	return o.Recurrences
}

func (o *Breakdown) GetTaxes() []Taxes {
	if o == nil {
		return nil
	}
	return o.Taxes
}

type TotalsDetail struct {
	AmountTax *float64   `json:"amount_tax,omitempty"`
	Breakdown *Breakdown `json:"breakdown,omitempty"`
}

func (o *TotalsDetail) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *TotalsDetail) GetBreakdown() *Breakdown {
	if o == nil {
		return nil
	}
	return o.Breakdown
}

type Order struct {
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL       BaseEntityACL `json:"_acl"`
	CreatedAt time.Time     `json:"_created_at"`
	ID        string        `json:"_id"`
	// Organization Id the entity belongs to
	Org       string            `json:"_org"`
	Owners    []BaseEntityOwner `json:"_owners"`
	Schema    string            `json:"_schema"`
	Tags      []string          `json:"_tags"`
	Title     string            `json:"_title"`
	UpdatedAt time.Time         `json:"_updated_at"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	AdditionalAddresses []BaseAddress `json:"additional_addresses,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	BillingAddress []BaseAddress `json:"billing_address,omitempty"`
	BillingContact *BaseRelation `json:"billing_contact,omitempty"`
	Customer       *BaseRelation `json:"customer,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	DeliveryAddress []BaseAddress `json:"delivery_address,omitempty"`
	ExpiresAt       *time.Time    `json:"expires_at,omitempty"`
	MappedEntities  *BaseRelation `json:"mapped_entities,omitempty"`
	OrderNumber     *string       `json:"order_number,omitempty"`
	Prices          *BaseRelation `json:"prices,omitempty"`
	Products        *BaseRelation `json:"products,omitempty"`
	Source          *Source       `json:"source,omitempty"`
	SourceType      *string       `default:"manual" json:"source_type"`
	Status          *Status       `default:"draft" json:"status"`
	TotalsDetail    *TotalsDetail `json:"totals_detail,omitempty"`
}

func (o Order) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Order) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Order) GetACL() BaseEntityACL {
	if o == nil {
		return BaseEntityACL{}
	}
	return o.ACL
}

func (o *Order) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Order) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Order) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Order) GetOwners() []BaseEntityOwner {
	if o == nil {
		return []BaseEntityOwner{}
	}
	return o.Owners
}

func (o *Order) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *Order) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Order) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Order) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Order) GetAdditionalAddresses() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.AdditionalAddresses
}

func (o *Order) GetBillingAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Order) GetBillingContact() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.BillingContact
}

func (o *Order) GetCustomer() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *Order) GetDeliveryAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

func (o *Order) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *Order) GetMappedEntities() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.MappedEntities
}

func (o *Order) GetOrderNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrderNumber
}

func (o *Order) GetPrices() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Prices
}

func (o *Order) GetProducts() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Products
}

func (o *Order) GetSource() *Source {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *Order) GetSourceType() *string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *Order) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Order) GetTotalsDetail() *TotalsDetail {
	if o == nil {
		return nil
	}
	return o.TotalsDetail
}
