// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-order/internal/sdk/pkg/utils"
	"time"
)

type OrderCreateSource struct {
	Href  *string `default:"null" json:"href"`
	Title *string `default:"manual" json:"title"`
}

func (o OrderCreateSource) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCreateSource) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderCreateSource) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *OrderCreateSource) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type OrderCreateStatus string

const (
	OrderCreateStatusDraft             OrderCreateStatus = "draft"
	OrderCreateStatusQuote             OrderCreateStatus = "quote"
	OrderCreateStatusPlaced            OrderCreateStatus = "placed"
	OrderCreateStatusComplete          OrderCreateStatus = "complete"
	OrderCreateStatusCancelled         OrderCreateStatus = "cancelled"
	OrderCreateStatusOpenForAcceptance OrderCreateStatus = "open_for_acceptance"
)

func (e OrderCreateStatus) ToPointer() *OrderCreateStatus {
	return &e
}

func (e *OrderCreateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "quote":
		fallthrough
	case "placed":
		fallthrough
	case "complete":
		fallthrough
	case "cancelled":
		fallthrough
	case "open_for_acceptance":
		*e = OrderCreateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderCreateStatus: %v", v)
	}
}

// OrderCreateType - One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
type OrderCreateType string

const (
	OrderCreateTypeOneTime   OrderCreateType = "one_time"
	OrderCreateTypeRecurring OrderCreateType = "recurring"
)

func (e OrderCreateType) ToPointer() *OrderCreateType {
	return &e
}

func (e *OrderCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		fallthrough
	case "recurring":
		*e = OrderCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderCreateType: %v", v)
	}
}

type OrderCreateRecurrences struct {
	AmountSubtotal        *float64 `json:"amount_subtotal,omitempty"`
	AmountSubtotalDecimal *string  `json:"amount_subtotal_decimal,omitempty"`
	AmountTax             *float64 `json:"amount_tax,omitempty"`
	AmountTotal           *float64 `json:"amount_total,omitempty"`
	AmountTotalDecimal    *string  `json:"amount_total_decimal,omitempty"`
	// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
	Type *OrderCreateType `default:"one_time" json:"type"`
}

func (o OrderCreateRecurrences) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCreateRecurrences) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderCreateRecurrences) GetAmountSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountSubtotal
}

func (o *OrderCreateRecurrences) GetAmountSubtotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountSubtotalDecimal
}

func (o *OrderCreateRecurrences) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *OrderCreateRecurrences) GetAmountTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTotal
}

func (o *OrderCreateRecurrences) GetAmountTotalDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AmountTotalDecimal
}

func (o *OrderCreateRecurrences) GetType() *OrderCreateType {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderCreateSchemasType string

const (
	OrderCreateSchemasTypeVat    OrderCreateSchemasType = "VAT"
	OrderCreateSchemasTypeCustom OrderCreateSchemasType = "Custom"
)

func (e OrderCreateSchemasType) ToPointer() *OrderCreateSchemasType {
	return &e
}

func (e *OrderCreateSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = OrderCreateSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderCreateSchemasType: %v", v)
	}
}

type OrderCreateTax struct {
	ID   *string                 `json:"_id,omitempty"`
	Rate *string                 `json:"rate,omitempty"`
	Type *OrderCreateSchemasType `json:"type,omitempty"`
}

func (o *OrderCreateTax) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OrderCreateTax) GetRate() *string {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *OrderCreateTax) GetType() *OrderCreateSchemasType {
	if o == nil {
		return nil
	}
	return o.Type
}

type OrderCreateTaxes struct {
	Amount *float64         `json:"amount,omitempty"`
	Tax    []OrderCreateTax `json:"tax,omitempty"`
}

func (o *OrderCreateTaxes) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *OrderCreateTaxes) GetTax() []OrderCreateTax {
	if o == nil {
		return nil
	}
	return o.Tax
}

type OrderCreateBreakdown struct {
	Recurrences []OrderCreateRecurrences `json:"recurrences,omitempty"`
	Taxes       []OrderCreateTaxes       `json:"taxes,omitempty"`
}

func (o *OrderCreateBreakdown) GetRecurrences() []OrderCreateRecurrences {
	if o == nil {
		return nil
	}
	return o.Recurrences
}

func (o *OrderCreateBreakdown) GetTaxes() []OrderCreateTaxes {
	if o == nil {
		return nil
	}
	return o.Taxes
}

type OrderCreateTotalsDetail struct {
	AmountTax *float64              `json:"amount_tax,omitempty"`
	Breakdown *OrderCreateBreakdown `json:"breakdown,omitempty"`
}

func (o *OrderCreateTotalsDetail) GetAmountTax() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountTax
}

func (o *OrderCreateTotalsDetail) GetBreakdown() *OrderCreateBreakdown {
	if o == nil {
		return nil
	}
	return o.Breakdown
}

type OrderCreate struct {
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	AdditionalAddresses []BaseAddress `json:"additional_addresses,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	BillingAddress []BaseAddress `json:"billing_address,omitempty"`
	BillingContact *BaseRelation `json:"billing_contact,omitempty"`
	Customer       *BaseRelation `json:"customer,omitempty"`
	// Addresses as a list of object, the element with index 0 is treated as the primary one.
	//
	DeliveryAddress []BaseAddress            `json:"delivery_address,omitempty"`
	ExpiresAt       *time.Time               `json:"expires_at,omitempty"`
	MappedEntities  *BaseRelation            `json:"mapped_entities,omitempty"`
	OrderNumber     *string                  `json:"order_number,omitempty"`
	Prices          *BaseRelation            `json:"prices,omitempty"`
	Products        *BaseRelation            `json:"products,omitempty"`
	Source          *OrderCreateSource       `json:"source,omitempty"`
	SourceType      *string                  `default:"manual" json:"source_type"`
	Status          *OrderCreateStatus       `default:"draft" json:"status"`
	TotalsDetail    *OrderCreateTotalsDetail `json:"totals_detail,omitempty"`
}

func (o OrderCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderCreate) GetAdditionalAddresses() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.AdditionalAddresses
}

func (o *OrderCreate) GetBillingAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *OrderCreate) GetBillingContact() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.BillingContact
}

func (o *OrderCreate) GetCustomer() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *OrderCreate) GetDeliveryAddress() []BaseAddress {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

func (o *OrderCreate) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *OrderCreate) GetMappedEntities() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.MappedEntities
}

func (o *OrderCreate) GetOrderNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrderNumber
}

func (o *OrderCreate) GetPrices() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Prices
}

func (o *OrderCreate) GetProducts() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Products
}

func (o *OrderCreate) GetSource() *OrderCreateSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *OrderCreate) GetSourceType() *string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *OrderCreate) GetStatus() *OrderCreateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OrderCreate) GetTotalsDetail() *OrderCreateTotalsDetail {
	if o == nil {
		return nil
	}
	return o.TotalsDetail
}
