// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-order/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-order/internal/sdk/pkg/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OrderDataSource{}
var _ datasource.DataSourceWithConfigure = &OrderDataSource{}

func NewOrderDataSource() datasource.DataSource {
	return &OrderDataSource{}
}

// OrderDataSource is the data source implementation.
type OrderDataSource struct {
	client *sdk.SDK
}

// OrderDataSourceModel describes the data model.
type OrderDataSourceModel struct {
	ACL                 BaseEntityACL            `tfsdk:"acl"`
	CreatedAt           types.String             `tfsdk:"created_at"`
	Org                 types.String             `tfsdk:"org"`
	Owners              []BaseEntityOwner        `tfsdk:"owners"`
	Schema              types.String             `tfsdk:"schema"`
	Tags                []types.String           `tfsdk:"tags"`
	Title               types.String             `tfsdk:"title"`
	UpdatedAt           types.String             `tfsdk:"updated_at"`
	AdditionalAddresses []BaseAddress            `tfsdk:"additional_addresses"`
	BillingAddress      []BaseAddress            `tfsdk:"billing_address"`
	BillingContact      *BaseRelation            `tfsdk:"billing_contact"`
	Customer            *BaseRelation            `tfsdk:"customer"`
	DeliveryAddress     []BaseAddress            `tfsdk:"delivery_address"`
	ExpiresAt           types.String             `tfsdk:"expires_at"`
	Hydrate             types.Bool               `tfsdk:"hydrate"`
	ID                  types.String             `tfsdk:"id"`
	MappedEntities      *BaseRelation            `tfsdk:"mapped_entities"`
	OrderNumber         types.String             `tfsdk:"order_number"`
	Prices              *BaseRelation            `tfsdk:"prices"`
	Products            *BaseRelation            `tfsdk:"products"`
	Source              *OrderCreateSource       `tfsdk:"source"`
	SourceType          types.String             `tfsdk:"source_type"`
	Status              types.String             `tfsdk:"status"`
	TotalsDetail        *OrderCreateTotalsDetail `tfsdk:"totals_detail"`
}

// Metadata returns the data source type name.
func (r *OrderDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_order"
}

// Schema defines the schema for the data source.
func (r *OrderDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Order DataSource",

		Attributes: map[string]schema.Attribute{
			"acl": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.StringAttribute{
						Computed:    true,
						Description: `Parsed as JSON.`,
					},
					"delete": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"edit": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"view": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"org": schema.StringAttribute{
				Computed:    true,
				Description: `Organization Id the entity belongs to`,
			},
			"owners": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"user_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"schema": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"additional_addresses": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"additional_info": schema.StringAttribute{
							Computed: true,
						},
						"city": schema.StringAttribute{
							Computed: true,
						},
						"country": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["DE", "AT", "CH"]`,
						},
						"postal_code": schema.StringAttribute{
							Computed: true,
						},
						"street": schema.StringAttribute{
							Computed: true,
						},
						"street_number": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Addresses as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"billing_address": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"additional_info": schema.StringAttribute{
							Computed: true,
						},
						"city": schema.StringAttribute{
							Computed: true,
						},
						"country": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["DE", "AT", "CH"]`,
						},
						"postal_code": schema.StringAttribute{
							Computed: true,
						},
						"street": schema.StringAttribute{
							Computed: true,
						},
						"street_number": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Addresses as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"billing_contact": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"customer": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"delivery_address": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"tags": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"additional_info": schema.StringAttribute{
							Computed: true,
						},
						"city": schema.StringAttribute{
							Computed: true,
						},
						"country": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["DE", "AT", "CH"]`,
						},
						"postal_code": schema.StringAttribute{
							Computed: true,
						},
						"street": schema.StringAttribute{
							Computed: true,
						},
						"street_number": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				MarkdownDescription: `Addresses as a list of object, the element with index 0 is treated as the primary one.` + "\n" +
					``,
			},
			"expires_at": schema.StringAttribute{
				Computed: true,
			},
			"hydrate": schema.BoolAttribute{
				Optional:    true,
				Description: `Hydrates entities in relations when passed true`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The order id`,
			},
			"mapped_entities": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"order_number": schema.StringAttribute{
				Computed: true,
			},
			"prices": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"products": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"href": schema.StringAttribute{
						Computed:    true,
						Description: `Default: null`,
					},
					"title": schema.StringAttribute{
						Computed:    true,
						Description: `Default: "manual"`,
					},
				},
			},
			"source_type": schema.StringAttribute{
				Computed:    true,
				Description: `Default: "manual"`,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["draft", "quote", "placed", "complete", "cancelled", "open_for_acceptance"]; Default: "draft"`,
			},
			"totals_detail": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"amount_tax": schema.NumberAttribute{
						Computed: true,
					},
					"breakdown": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"recurrences": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"amount_subtotal": schema.NumberAttribute{
											Computed: true,
										},
										"amount_subtotal_decimal": schema.StringAttribute{
											Computed: true,
										},
										"amount_tax": schema.NumberAttribute{
											Computed: true,
										},
										"amount_total": schema.NumberAttribute{
											Computed: true,
										},
										"amount_total_decimal": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Description: `One of ` + "`" + `one_time` + "`" + ` or ` + "`" + `recurring` + "`" + ` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. must be one of ["one_time", "recurring"]; Default: "one_time"`,
										},
									},
								},
							},
							"taxes": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"amount": schema.NumberAttribute{
											Computed: true,
										},
										"tax": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"rate": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed:    true,
														Description: `must be one of ["VAT", "Custom"]`,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func (r *OrderDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OrderDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OrderDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	hydrate := new(bool)
	if !data.Hydrate.IsUnknown() && !data.Hydrate.IsNull() {
		*hydrate = data.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	orderID := data.ID.ValueString()
	request := operations.GetOrderRequest{
		Hydrate: hydrate,
		OrderID: orderID,
	}
	res, err := r.client.Order.GetOrder(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Order == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedOrder(res.Order)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
